setopt prompt_subst
autoload -Uz vcs_info

zstyle ':vcs_info:*' enable hg bzr git
zstyle ':vcs_info:*:*' unstagedstr '!'
zstyle ':vcs_info:*:*' stagedstr '+'
zstyle ':vcs_info:*:*' formats "$fg_bold[green]%~" "%s/%b" "%%u%c"
zstyle ':vcs_info:*:*' nvcsformats "$fg_bold[green]%~" "" ""

# Fastest possible way to check if repo is dirty
git_dirty() {
    # Check if we're in a git repo
    command git rev-parse --is-inside-work-tree &>/dev/null || return
    # Check if it's dirty
    command git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo "*"
}

# Display information about the current repository
#
repo_information() {
    echo "${vcs_info_msg_0_%%/.} $fg[grey]$vcs_info_msg_1_`git_dirty` $vcs_info_msg_2_"
}

# Displays the exec time of the last command if set threshold was exceeded
cmd_exec_time() {
    local stop=`date +%s`
    local start=${cmd_timestamp:-$stop}
    let local elapsed=$stop-$start
    [ $elapsed -gt 5 ] && echo ${elapsed}s
}

# Get the initial timestamp for cmd_exec_time
preexec() {
    cmd_timestamp=`date +%s`
}

# Output additional information about paths, repos and exec time
precmd() {
    vcs_info # Get version control info before we start outputting stuff
    print -P "\n$(repo_information) $fg[yellow]$(cmd_exec_time)"
    unset cmd_timestamp # Reset cmd exec time
}

# Display a red prompt char on failure
PROMPT="%(?:%{$fg_bold[magenta]%}❯ :%{$fg_bold[red]%}❯ )%{$reset_color%}"
